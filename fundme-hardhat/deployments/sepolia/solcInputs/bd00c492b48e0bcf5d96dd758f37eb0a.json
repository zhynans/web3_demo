{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n// 1、创建一个收款函数\n// 2、记录投资人并且查看\n// 3、在锁定期内，达到目标值，生产商可以提款\n// 4、在锁定期内，没有达到目标值，投资人可以退款\n\ncontract FundMe {\n    mapping(address => uint256) public fundersToAmount;\n\n    uint256 constant MIN_VALUE = 1 * 10 ** 8; // 单位：USD，最小值1美元\n\n    AggregatorV3Interface public dataFeed;\n\n    uint256 constant TARGET = 100 * 10 ** 8; // 目标值：100美元\n\n    address public owner; // 合约的拥有者\n\n    uint256 deploymentTimeStamp; // 合约部署时间\n    uint256 lockTime; // 锁定期时间\n\n    address erc20Addr;\n\n    bool public getFundSuccess = false; // 众筹状态：是否成功\n\n    constructor(uint256 _lockTime, address _dataFeed) {\n        // 预言机的sepolia testnet地址\n        dataFeed = AggregatorV3Interface(_dataFeed);\n        owner = msg.sender; // 部署合同的人\n        deploymentTimeStamp = block.timestamp;\n        lockTime = _lockTime;\n    }\n\n    // 收款函数，加了payable即可\n    function fund() external payable {\n        require(\n            block.timestamp < deploymentTimeStamp + lockTime,\n            \"the fund is closed\"\n        );\n        require(msg.value >= MIN_VALUE, \"too less\");\n        fundersToAmount[msg.sender] = msg.value;\n    }\n\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        // prettier-ignore\n        (\n            /* uint80 roundId */,\n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n\n    function convertEthToUsd(\n        uint256 ethAmount\n    ) internal view returns (uint256) {\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return (ethAmount * ethPrice) / (10 ** 8);\n    }\n\n    // 修改合约的拥有人地址\n    function transferOwnerShop(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    // 查看筹款金额是否达标\n    function getFund() external windowClose onlyOwner {\n        require(\n            convertEthToUsd(address(this).balance) >= TARGET,\n            \"Target is not reached\"\n        );\n\n        // 提款\n        payable(msg.sender).transfer(address(this).balance);\n\n        // 众筹成功\n        getFundSuccess = true;\n    }\n\n    function refund() external windowClose {\n        require(\n            convertEthToUsd(address(this).balance) < TARGET,\n            \"Target is reached\"\n        );\n        require(fundersToAmount[msg.sender] != 0, \"there is no fund for you\");\n\n        bool success;\n        (success, ) = payable(msg.sender).call{\n            value: fundersToAmount[msg.sender]\n        }(\"\");\n        require(success, \"refund failed\");\n        fundersToAmount[msg.sender] = 0;\n    }\n\n    function setFunderToAmount(\n        address funder,\n        uint256 amountToUpdate\n    ) external {\n        require(\n            msg.sender == erc20Addr,\n            \"you are not allowed to call this function\"\n        );\n        fundersToAmount[funder] = amountToUpdate;\n    }\n\n    function setERC20Addr(address erc20Addr_) public onlyOwner {\n        erc20Addr = erc20Addr_;\n    }\n\n    // 判断锁定期是否达到\n    modifier windowClose() {\n        require(\n            block.timestamp >= deploymentTimeStamp + lockTime,\n            \"It's not closed\"\n        );\n        _;\n    }\n\n    // 判断是否合约拥有者\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"this funciotn can only be called  by owner\"\n        );\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}